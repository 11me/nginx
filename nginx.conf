user www-data;
worker_processes auto;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 65535;

# only log critical errors
error_log /var/log/nginx/error.log crit;

events
{
	# determines how much clients will be served per worker
	# max clients = worker_connections * worker_processes
	# max clients is also limited by the number of socket connections available on the system (~64k)
	worker_connections 100000;
	# accept as many connections as possible, may flood worker connections if set too low -- for testing environment
	multi_accept on;
}


http
{
	# Log format
	log_format main '$remote_addr - $remote_user [$time_local] "$request" $request_length ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"';
	log_format combined_with_request_time '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent"' ' $request_time';

	# cache informations about FDs, frequently accessed files
	# can boost performance, but you need to test those values
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	# to boost I/O on HDD we can disable access logs
	access_log off;

	# copies data between one FD and other from within the kernel
	# faster then read() + write()
	sendfile on;

	# send headers in one peace, its better then sending them one by one
	tcp_nopush on;

	# don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

	# reduce the data that needs to be sent over network -- for testing environment
	gzip on;
	gzip_min_length 10240;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
	gzip_disable msie6;

	# allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	# request timed out -- default 60
	client_body_timeout 3m;
	# максимальный размер запроса
	client_max_body_size 100m;

	client_body_in_file_only clean;
	client_body_buffer_size 32K;


	# if client stop responding, free up memory -- default 60
	send_timeout 3m;
	# server will close connection after this time -- default 75
	keepalive_timeout 30;


	proxy_http_version 1.1;
	proxy_cache_bypass $http_upgrade;

	# Proxy SSL
	proxy_ssl_server_name on;

	# Proxy headers
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header Connection $connection_upgrade;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header Forwarded $proxy_add_forwarded;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;
	proxy_set_header X-Forwarded-Host $host;
	proxy_set_header X-Forwarded-Port $server_port;

	# Proxy timeouts
	proxy_connect_timeout 60s;
	proxy_send_timeout 60s;
	proxy_read_timeout 60s;


	# Connection header for WebSocket reverse proxy
	map $http_upgrade $connection_upgrade
	{
		default upgrade;
		"" close;
	}
	resolver 127.0.0.1;
	resolver_timeout 2s;

	include mime.types;
	default_type application/octet-stream;

	#Sites
    #include /path/to/nginx/sites/*.conf;
}
